#!/bin/bash
source /usr/bin/llaman-functions
llamanVersion=0.2.5
configFile=/opt/open-webui/config/llaman.conf
pipDir=/opt/open-webui/config/conda/open-webui/lib/python3.11/site-packages/open_webui

help="
LLaMan $llamanVersion

llaman [PARAMETER]

PARAMETERS:
-b,    --backup             Backup Open-WebUI users and settings
-bu,   --backup-utility     Start the backup utility
-i,    --import             Import Open-WebUI archive
-e,    --enable             Enable Ollama and Open-WebUI
-d,    --disable            Disable Ollama and Open-WebUI
-s,    --start              Start Ollama and Open-WebUI
-S,    --stop               Stop Ollama and Open-WebUI
-r,    --restart            Restart Ollama and Open-WebUI
-t,    --status             Get status of ollama.service and open-webui.service.
-I,    --install            Install a downloaded .gguf model
-R,    --remove             Remove model from Ollama
-rg,   --remove-gguf        Remove downloaded .gguf model
-D,    --download           Download .gguf file from https://huggingface.co
-u,    --update             Update Ollama and Open-Webui
-cp,   --change-port        Change the Open-WebUI port
-v,    --version            Get LLaMan, Ollama, and Open-Webui version
-vl,   --view-logs          View LLaMan logs
-h,    --help               Display this help menu
-X,    --uninstall          Uninstall LLaMan, Ollama, and Open-Webui
Example: sudo llaman -e
"
# -cps,  --change-port-speech ChangeSpeechPort

Backup()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	_date=$(date +%m-%d-%Y-%H:%M)
	_fileName="llaman-backup-$_date.tar"
	_tarPath=$backupDirectory/$_fileName
	
	ollamaDirs="$(whereis ollama | cut -d ' ' -f 2-)"
	time tar cf "$_tarPath" $defaultDir /usr/bin/llaman /usr/bin/llaman-functions $ollamaDirs /etc/systemd/system/ollama.service $serviceDirectory/llaman-backup.service $serviceDirectory/llaman-backup.timer $serviceDirectory/open-webui.service
	
	USER1=$(stat -c '%U' "$backupDirectory")
	chown -f $USER1:$USER1 "$_tarPath"
	chmod -f 770 "$_tarPath"
	
	echo "> Your backup is:"
	_tarSize=$(du -h "$_tarPath")
	echo "> Size: $_tarSize"
	
	Log "BACKUP | Created backup $_tarPath" $logFile
}

BackupAuto()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	Backup
	
	tarList=$(ls -1 --sort=time -r "$backupDirectory"/llaman-backup*.tar)
	newestTar=$(echo "$tarList" | tail -n 1)
	oldestTar=$(echo "$tarList" | head -n 1)
	tarCount=$(echo "$tarList" | wc -l)

	while [[ $tarCount -gt $maxBackupNumber ]]; do
		Log "BACKUP-AUTO | More than $maxBackupNumber, removing $oldestTar" $logFile
		echo "> There are $tarCount backups."
		echo "> Since there are more than $maxBackupNumber backups..."
		echo "> LLaMan is removing $oldestTar"
		# echo "> NewBackup=$newestTar"
		rm -f "$oldestTar"
		tarList=$(ls -1 --sort=time -r "$backupDirectory"/llaman-backup*.tar)
		newestTar=$(echo "$tarList" | tail -n 1)
		oldestTar=$(echo "$tarList" | head -n 1)
		tarCount=$(echo "$tarList" | wc -l)
	done
}

BackupUtility()
{
	if ! HasSudo; then
		exit
	fi

	while true; do
		clear
		optionNumber=
		autoBackupSwitch=
		source $configFile
		
		if [[ ! -d $backupDirectory ]]; then
			PromptUser dir "> Please enter your desired directory for backup archives"
			backupDirectory="$promptResult"
			PromptUser num "> Please enter your desired maximum number of backup archives" 1 20 "1-20"
			maxBackupNumber=$promptResult
			systemctl enable --now llaman-backup.timer
			SetVar backupDirectory "$backupDirectory" "$configFile" bash directory
			SetVar maxBackupNumber $maxBackupNumber "$configFile" bash int
			SetVar autoBackups true "$configFile" bash bool
			SetVar backupFrequency "weekly" "$configFile" bash string
			Log "BACKUP-UTILITY | Setup Backup Utility at $backupDirectory max of $maxBackupNumber done weekly" $logFile
		fi
		
		source $configFile
		
		if $autoBackups; then
			autoBackupSwitch="ON"
		else
			autoBackupSwitch="OFF"
		fi
		echo
		echo "> Automatic backups are $autoBackupSwitch"
		echo
		echo "> 1. Enable automatic backups"
		echo "> 2. Disable automatic backups"
		echo "> 3. Change backup folder"
		echo "> 4. Change max backups [ $maxBackupNumber ]"
		echo "> 5. Change frequency of backups [ $backupFrequency ]"
		echo "> 6. Create a llaman-backup.tar archive"
		echo "> 7. EXIT"
		echo
		PromptUser num "> Please select the number corresponding with the option you want to select." 1 7 "1-7"
		optionNumber=$promptResult
		echo
		case $optionNumber in
			"1")
				# enable auto-backups
				systemctl enable --now llaman-backup.timer
				SetVar autoBackups true "$configFile" bash bool
				Log "BACKUP-UTILITY | Automatic backups enabled" $logFile
				;;
			"2")
				# disable auto-backups
				systemctl disable --now llaman-backup.timer
				SetVar autoBackups false "$configFile" bash bool
				Log "BACKUP-UTILITY | Automatic backups disabled" $logFile
				;;
			"3")
				# change backup folder
				if [[ -n $backupDirectory ]]; then
					echo "> Current directory for backups is $backupDirectory"
				fi
				PromptUser dir "> Please enter your desired directory for backup archives"
				backupDirectory="$promptResult"
				SetVar "backupDirectory" "$backupDirectory" "$configFile" bash directory
				Log "BACKUP-UTILITY | Automatic backup location changed to $backupDirectory" $logFile
				;;
			"4")
				# change max backups
				if [[ -n $maxBackupNumber ]]; then
					echo "> Current maximum backups allowed is $maxBackupNumber"
				fi
				PromptUser num "> Please enter your desired maximum number of backup archives" 1 50 "1-50"
				maxBackupNumber=$promptResult
				SetVar maxBackupNumber "$maxBackupNumber" "$configFile" bash int
				Log "BACKUP-UTILITY | Max automatic backups changed to $maxBackupNumber " $logFile
				;;
			"5")
				# change frequency of backups
				echo "> Automatic backups will be done on a $backupFrequency basis."
				echo
				echo "> 1. Daily backups"
				echo "> 2. Weekly backups"
				echo "> 3. Monthly backups"
				echo
				PromptUser num "> Please select the number corresponding with the option you want to select." 1 3 "1-3"
				_optionNumber=$promptResult
				echo
				llamanBackupTimer=$serviceDirectory/llaman-backup.timer
				case $_optionNumber in
					"1")
						SetVar backupFrequency "daily" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=*-*-* 01:00:00|g" $llamanBackupTimer
						echo "> Backups will now be created every day at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to daily" $logFile
						;;
					"2")
						SetVar backupFrequency "weekly" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=Sun *-*-* 01:00:00|g" $llamanBackupTimer
						echo "> Backups will now be created every Sunday at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to weekly" $logFile
						;;
					"3")
						SetVar backupFrequency "monthly" "$configFile" bash string
						sed -i "s|OnCalendar.*|OnCalendar=*-*-01 01:00:00|g" $llamanBackupTimer
						echo "> Backups will now be created on the 1st of every month at 1:00 AM"
						read -p "> Press ENTER to exit" ENTER
						Log "BACKUP-UTILITY | Frequency of automatic backups changed to monthly" $logFile
						;;
				esac
				systemctl daemon-reload
				systemctl restart llaman-backup.timer
				;;
			"6")
				llaman -ba
				exit
				;;
			"7")
				exit
				;;
		esac
	done
}

Import() {
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	echo "> WARNING!: This procedure will completely erase $defaultDir"
	importTarDir=$backupDirectory
	PresentList "$importTarDir" "Please enter the number corresponding to the .tar you want to select." "llaman-backup-"
	importTar=$importTarDir/$presentListResult
	
	llaman -S
	rm -rf $defaultDir
	tar xf $importTar -C /

	chown -Rf $defaultUser:$defaultUser $defaultDir
	chmod -Rf 770 $defaultDir
	llaman -s
	Log "IMPORT | Imported $importTar" $logFile
}

InstallModel()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	selectedModelFile="$defaultDir/config/modelfiles/DEFAULT"

	PresentList "$ggufDirectory" "> Please enter the number corresponding to the .gguf you want to select." ".gguf"
	selectedFile="$ggufDirectory/$presentListResult"

	if PromptUser Yn "> Go with the DEFAULT modelfile?" 0 0 "Y/n"; then
		echo "> Using DEFAULT modelfile"
	else
		PresentList "$defaultDir/config/modelfiles" "Please enter the number corresponding to the modelfile you want to select."
		selectedModelFile="$defaultDir/config/modelfiles/$presentListResult"
	fi

	nameOfLLM=$(echo "$selectedFile" | rev | cut -d / -f 1 | rev | sed -r "s|.gguf||g")
	echo "Selected file: $selectedFile"
	echo "Name of LLM: $nameOfLLM"

	sed -i "s|FROM /.*|FROM $selectedFile|g" $selectedModelFile

	ollama create $nameOfLLM -f $selectedModelFile
	Log "INSTALL-MODEL | Installed model $nameOfLLM" $logFile
}

RemoveGGUF()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	PresentList "$ggufDirectory" "> Please enter the number corresponding to the .gguf you want to delete." ".gguf"
	selectedFile="$ggufDirectory/$presentListResult"
	
	nameOfLLM=$(echo "$selectedFile" | rev | cut -d / -f 1 | rev | sed -r "s|.gguf||g")
	echo "Selected file: $selectedFile"
	echo "Name of LLM: $nameOfLLM"
	if PromptUser yN "> Are you sure you want to delete $nameOfLLM from your system?" 0 0 "y/N"; then
		rm -fv $selectedFile
	else
		echo "> Keeping $nameOfLLM..."
	fi
}

RemoveModel()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	echo "Installed LLMs:"
	installedLLMs=$(ollama list | grep -o ".*:.*" | cut -d " " -f 1 | cat -n)
	num=$(echo "$installedLLMs" | wc -l)
	
	echo "$installedLLMs"

	read -p "Please enter the number corresponding to the LLM you want to remove: " LLMNumber

	if [ $LLMNumber -gt $num ] || [ $LLMNumber -lt 1 ] ; then
		echo "> Invalid selection. Please choose a number within the range of available LLMs."
	else
		selectedFile=$(ollama list | grep -o ".*:.*" | cut -d " " -f 1 | head -n $LLMNumber | tail -n 1)
		echo "Selected LLM: $selectedFile"
		ollama rm $selectedFile
		Log "REMOVE-MODEL | Removed model $selectedFile" $logFile
	fi
}

DownloadModel()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	echo "> Please past the URL to the .gguf file from https://huggingface.co"
	read -p ">>> URL : " 'URL'
	
	if [[ -n "$URL" ]]; then
		URL=$(echo $URL | sed 's/?download=true//')
		fileName=$(echo $URL | rev | cut -d / -f 1 | rev)
		echo "screen -dmS llm-downloading bash -c 'wget -O ${ggufDirectory}/${fileName} ${URL}'"
		screen -dmS llm-downloading bash -c "wget -O $ggufDirectory/$fileName $URL"

		USER1=$(stat -c '%U' "$ggufDirectory")
		chown -f $USER1:$USER1 "$ggufDirectory/$fileName"
		chmod -f 770 "$ggufDirectory/$fileName"

		Log "DOWNLOAD-MODEL | Downloaded model $fileName" $logFile
		exit
	else
	    echo "> Please provide a link to a .gguf file"
	fi
}

ChangePort()
{
	source $configFile
	newPort=
	if [[ ! -n $1 ]]; then
		PromptUser num "Enter a valid port" 1024 65535 "1024-65535"
		newPort=$promptResult
	else
		newPort=$1
	fi
	echo "> Changing Open-WebUI port to $newPort"
	SetVar httpPort $newPort "$configFile" bash int
	Log "CHANGE-PORT | Changed Open-WebUI port to $newPort" $logFile
	Control restart
}

UpdateWeb()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	systemctl stop open-webui
	sudo -u $defaultUser bash -c "
	source $defaultDir/miniconda3/etc/profile.d/conda.sh
	conda activate $defaultDir/config/conda/open-webui
	pip install open-webui --upgrade"
	systemctl start open-webui
	Log "UPDATE-WEB | Updated Open-WebUI" $logFile
}

Update()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	installedLlamanVersion="$llamanVersion"
	latestLlamanVersion=$(GetLatestLlamanVersion)
	installedOllamaVersion=$(GetOllamaVersion)
	latestOllamaVersion=$(GetLatestOllamaVersion)
	installedWebUIVersion=$(GetWebUIVersion)
	latestWebUIVersion=$(GetLatestWebUIVersion)
	
	if [[ ! "$installedOllamaVersion" == "$latestOllamaVersion" ]]; then
		curl -fsSL https://ollama.com/install.sh | sh
		Log "UPDATE | Updated Ollama to v$latestOllamaVersion" $logFile
	else
		echo "> The latest Ollama version $latestOllamaVersion is already installed."
	fi

	if [[ ! "$installedWebUIVersion" == "$latestWebUIVersion" ]]; then
		UpdateWeb
		Log "UPDATE | Updated Open-WebUI to v$latestWebUIVersion" $logFile
	else
		echo "> The latest Open Web-UI version $latestWebUIVersion is already installed."
	fi
	
	if [[ ! "$installedLlamanVersion" == "$latestLlamanVersion" ]]; then
		git clone https://github.com/Smiley-McSmiles/llaman
		cd llaman
		chmod ug+x setup.sh
		sudo ./setup.sh -U
		cd ../
		rm -rf llaman
	else
		echo "> The latest LLaMan version $latestLlamanVersion is already installed."
	fi
}

GetVersions()
{
	if ! HasSudo; then
		exit
	fi

	installedOllamaVersion=$(GetOllamaVersion)
	installedWebUIVersion=$(GetWebUIVersion)
	echo "LLaMan v$llamanVersion"
	echo "Ollama v$installedOllamaVersion"
	echo "Open-WebUI v$installedWebUIVersion"
}

GetLatestLlamanVersion()
{
	echo $(curl -fsSL https://raw.githubusercontent.com/Smiley-McSmiles/llaman/main/README.md | head -n 1 | cut -d " " -f 3 | sed -r "s|v||g")
}

GetLatestOllamaVersion()
{
	echo $(curl -fsSL https://github.com/ollama/ollama/releases/latest | grep '<title>' | cut -d " " -f 4 | sed -r "s/v//g")
}

GetOllamaVersion()
{
	echo $(ollama --version | rev | cut -d " " -f 1 | rev)
}

GetLatestWebUIVersion()
{
	echo $(curl -fsSL https://github.com/open-webui/open-webui/releases/latest | grep '<title>' | cut -d " " -f 4 | sed "s|v||g")
}

GetWebUIVersion()
{
	source $configFile
	echo $(head -n 15 $pipDir/CHANGELOG.md | grep -o "## \[.*\]" | sed "s|## \[||g" | sed "s|\]||g")
}

Control()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	
	case "$1" in
		start) systemctl start ollama open-webui # opendai
			Log "LLAMAN | Started Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
		stop) systemctl stop ollama open-webui # opendai
			Log "LLAMAN | Stopped Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
		enable) systemctl enable ollama open-webui # opendai
			Log "LLAMAN | Enabled Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
		disable) systemctl disable ollama open-webui # opendai
			Log "LLAMAN | Disabled Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
		restart) systemctl restart ollama open-webui # opendai
			Log "LLAMAN | Restarted Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
		status) systemctl status ollama open-webui # opendai
			Log "LLAMAN | Restarted Ollama, Open-webui, and OpendAI-Speech" $logFile ;;
	esac
}

Uninstall()
{
	if ! HasSudo; then
		exit
	fi

	source $configFile
	if PromptUser yN "Are you sure you want to fully uninstall LLaman/Ollama/Open-webui/OpendAI-Speech?" 0 0 "y/N"; then
		llaman -d -S
		userdel $defaultUser
		userdel ollama
		groupdel $defaultUser
		groupdel ollama
		rm -rf $serviceLocation/open-webui.service \
			$serviceLocation/ollama.service \
			/usr/local/bin/ollama \
			$defaultDir \
			$ollamaModelsDirectory \
			/usr/share/ollama \
			/usr/bin/llaman
		echo ">> LLaMan | Ollama | Open-WebUI" # | OpendAI-Speech <<"
		echo ">>     HAS BEEN DELETED!     <<"
	 else
		exit
	fi
}

Help ()
{
echo "$help"
}

###############################################################################
# MAIN                                                                        #
###############################################################################
if [ -n "$1" ]; then
   while [ -n "$1" ]; do
      case "$1" in
         -b | --backup) Backup ;;
         -ba | --backup-auto) BackupAuto ;;
         -bu | --backup-utility) BackupUtility ;;
         -i | --import) Import ;;
         -e | --enable) Control "enable" ;;
         -d | --disable) Control "disable" ;;
         -S | --stop) Control "stop" ;;
         -s | --start) Control "start" ;;
         -r | --restart) Control "restart" ;;
         -t | --status) Control "status" ;;
         -I | --install) InstallModel ;;
         -R | --remove) RemoveModel ;;
         -rg | --remove-gguf) RemoveGGUF ;;
         -D | --download) DownloadModel ;;
         -u | --update) Update ;;
         -cp | --change-port) ChangePort ;;
         # -cps | --change-port-speech) ChangePortSpeech ;;
         -v | --version) GetVersions ;;
         -vl | --view-logs) if ! HasSudo; then
		exit
	fi

         		source $configFile
         		ViewLog "$defaultDir/log" ;;
         -X | --uninstall) Uninstall ;;
         -h | --help) Help ;;
         *) echo "Option $1 not recognized"
            Help ;;
      esac
      shift
   done
else
   echo "> No parameters given."
   Help
   exit
fi
